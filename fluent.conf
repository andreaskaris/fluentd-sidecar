####
## Source section
####

# Tail logs from /fluent-logs/log.txt. Parse each line as JSON. Tag the logs as custom_logs.* so that we can target
# them in the following sections.
<source>
  @type tail
  @id custom_logs
  <parse>
    @type json
  </parse>
  path /fluent-logs/log.txt
  tag custom_logs.*
</source>

####
## Filter section
####
# Add custom records to the ingested data. The OpenShift Loki stack expects that we set certain labels. In order to
# filter, we must set valid values. For this demo, the easiest is to set the namespace name to the actual namespace
# name and then filter for that. See the Makefile for how we replace _PROJECT_ with the actual value of the namespace.
<filter custom_logs.**>
  @type record_modifier
  <record>
    _log_type application
    _kubernetes_container_name custom_log_container
    _kubernetes_host custom_log_host
    _kubernetes_namespace_name _PROJECT_
    _kubernetes_pod_name custom_log_pod
  </record>
</filter>

####
## Output section
####

## For debugging, dump to console:
# <match custom_logs.**>
#   @type stdout
#   @id output_stdout
# </match>

## Match custom logs and send them to Loki. In order to do so, we use the ServiceAccount token and CA cert.
# Loki expects certain labels to be set, we do that in the labels section.
# See https://grafana.com/docs/loki/latest/send-data/fluentd/#adding-labels for info about the Loki plugin labels section.
# The <buffer> settings are copied from the OpenShift collector pods and slightly modified. See
# https://grafana.com/docs/loki/latest/send-data/fluentd/#usage for options.
# The fluentd configuration is documented in https://loki-operator.dev/docs/forwarding_logs_to_gateway.md/#fluentd
<match custom_logs.**>                                                  
  @type loki                                
  @id default_loki_apps
  line_format json
  url https://logging-loki-gateway-http.openshift-logging.svc:8080/api/logs/v1/application                                                                 
  min_version TLS1_2
  # fluents complains about this in my tests.
  # ciphers TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-
S256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384  
  ca_cert /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
  bearer_token_file /var/run/secrets/kubernetes.io/serviceaccount/token
  # extract_kubernetes_labels true  # makes no difference in my tests
  <label>                                
    kubernetes_container_name _kubernetes_container_name
    kubernetes_host _kubernetes_host
    kubernetes_namespace_name _kubernetes_namespace_name
    kubernetes_pod_name _kubernetes_pod_name                       
    log_type _log_type                                                      
  </label>                                                                 
  <buffer>                                
    @type file                                                             
    path '/tmp/default_loki_apps'                  
    flush_mode interval                
    flush_interval 1s
    flush_thread_count 2
    retry_type exponential_backoff
    retry_wait 1s
    retry_max_interval 60s
    retry_timeout 60m
    queued_chunks_limit_size "#{ENV['BUFFER_QUEUE_LIMIT'] || '32'}"
    total_limit_size "#{ENV['TOTAL_LIMIT_SIZE_PER_BUFFER'] || '8589934592'}"
    chunk_limit_size "#{ENV['BUFFER_SIZE_LIMIT'] || '8m'}" 
    overflow_action block
    disable_chunk_backup true
  </buffer>
</match>
